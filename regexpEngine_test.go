package sherlock

import (
	"testing"
)

/*
    .                          .
  .o8                        .o8
.o888oo  .ooooo.   .oooo.o .o888oo  .oooo.o
  888   d88' `88b d88(  "8   888   d88(  "8
  888   888ooo888 `"Y88b.    888   `"Y88b.
  888 . 888    .o o.  )88b   888 . o.  )88b
  "888" `Y8bod8P' 8""888P'   "888" 8""888P'
*/
func TestRegexStringLow(t *testing.T) {
	var tCases = []struct {
		val      string
		reString string
	}{
		{"172600", "^[0 ]*172600$"},
		{"172 6 00", "^[0 ]*172[0 ]*6[0 ]*00$"},
		{" ", " "},
		{"", ""},
	}
	for _, tc := range tCases {
		reString := regexStringLow(tc.val)
		if tc.reString != reString {
			t.Errorf("expecting %v, got %v\n", tc.reString, reString)
		}
	}
}

func TestRegexStringHigh(t *testing.T) {
	var tCases = []struct {
		val      string
		reString string
	}{
		{"12 34", "^[0 ]*12[0 ]*34[0 ]*$"},
		{"172600", "^[0 ]*172600[0 ]*$"},
		{"172600 145 11 1 1", "^[0 ]*172600[0 ]*145[0 ]*11[0 ]*1[0 ]*1[0 ]*$"},
		{" ", " "},
		{"", ""},
	}
	for _, tc := range tCases {
		reString := regexStringHigh(tc.val)
		if tc.reString != reString {
			t.Errorf("expecting %v, got %v\n", tc.reString, reString)
		}
	}
}

func TestRegexStringRemZero(t *testing.T) {
	var tCases = []struct {
		val      string
		reString string
	}{
		{"12 34", "^[0 ]*1[0 ]*2[0 ]*3[0 ]*4[0 ]*$"},
		{"A08 002014", "^[0 ]*A[0 ]*8[0 ]*2[0 ]*1[0 ]*4[0 ]*$"},
		{"A08 010001", "^[0 ]*A[0 ]*8[0 ]*1[0 ]*1[0 ]*$"},
		{"A09 001004 001", "^[0 ]*A[0 ]*9[0 ]*1[0 ]*4[0 ]*1[0 ]*$"},
		{" ", " "},
		{"", ""},
	}
	for _, tc := range tCases {
		reString := regexStringComplex(tc.val)
		if tc.reString != reString {
			t.Errorf("expecting %v, got %v\n", tc.reString, reString)
		}
	}
}

func TestRegexMatch(t *testing.T) {
	var tCases = []struct {
		row   int
		val1  string
		val2  string
		match bool
		rule  int
	}{
		{1, "172600 145 11 1 1", "17260014501100010010000000", true, 5},
		{2, "172600 145 11 1 1", "00001726001451111", true, 1},
		{3, "12345001111111", "123450011 11111", true, 1},
		{4, "12345001111 111", "12345001111111", true, 1},
		{5, "1234 500 1111 111", "12345001111111", true, 1},
		{6, "1234 500 1111 111", "1234500 1111 111", true, 1},
		{7, "1234 500 1111 111", "1234500 1111 11100", true, 5},
		{8, "1234 500 1111 111", "001234500 1111 11100", true, 5},
		{9, "123 456 789 012 345 678 911", "0000000000123 456 789 012 345 678 911", true, 1},
		{10, "123456789012345678911", "123 456 789 012 345 678 911", true, 1},
		{11, "00000123456789012345678911", "123 456 789 012 345 678 911", true, 1},
		{12, "00000123456789012345678911", "00000123 456 789 012 345 678 911", true, 1},
		{13, "00000123456789012345678911", "000123 456 789 012 345 678 9110000", true, 7},
		{14, "123456789012345678911", "0000123 456 789 012 345 678 9110000", true, 7},
		{15, "0000012345678901234567891100000", "123 456 789 012 345 678 911", true, 5},
		{16, "123 456 789 012 345 678 911", "123 456 789 012 345 678 9110000000000", true, 5},
		{17, "1234 500 1111 111", "1234500 1111 1115", false, -1},
		{18, "1234 500 1111 111", "1234500 1111 1110005", false, -1},
		{19, "000101234 500 1111 111", "1234500 1111 111", false, -1},
		{20, "1001234 500 1111 111", "1234500 1111 111", false, -1},
		{21, "212801 119 44 7 38", "21280111904400070380000000", true, 5},
		{22, "465000 247 20 01 011 000", "4650002470200001011000", true, 1},
		{23, "467289 105 09 01 009 000", "4672891050090001009000", true, 1},
		{24, "453089 03 1 41", "45308900300000010410000000", true, 5},
		{25, "342400 16 1 25 112", "3424000160000001025112", true, 1},
		{26, "324889 27 08 2 301 100", "3248890270080002301100", true, 1},
		{27, "452601 01 1 31", "45260100100000010310000000", true, 5},
		{28, "453289 36 3 58", "45328903600000030580000000", true, 5},
		{29, "453089 01 1 48 95", "45308900100000010480950000", true, 5},
		{30, "343689 79 19 1 6", "3436890790190001006000", true, 5},
		{31, "343401 80 5 2 52", "3434010800050002052000", true, 5},
		{32, "342089 74 1 74", "3420890740000001074000", true, 5},
		{33, "45 10C", "450000010C", true, 1},
		{34, "73C 15A", "73C000015A", true, 1},
		{35, "70 9B", "700000009B", true, 1},
		{36, "123", "", false, -1},
		{37, "", "123", false, -1},
		{38, "", "", false, -1},
		{39, " ", " ", false, -1},
		{40, "", " ", false, -1},
		{41, " ", "", false, -1},
	}
	for _, tc := range tCases {
		isTrunc := false
		rule, match := regexMatch(tc.val1, tc.val2, isTrunc)
		if match != tc.match || tc.rule != rule {
			t.Errorf("%d - expecting %v %v, got %v %v\n", tc.row, tc.match, tc.rule, match, rule)
		}
	}
}
